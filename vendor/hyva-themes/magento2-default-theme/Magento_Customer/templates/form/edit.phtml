<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Customer\Block\Form\Edit as CustomerEdit;
use Magento\Customer\Block\Widget\Name;
use Magento\Framework\Escaper;
use Hyva\Theme\ViewModel\ReCaptcha;
use Hyva\Theme\ViewModel\HeroiconsSolid;

// phpcs:disable Generic.Files.LineLength.TooLong

/** @var CustomerEdit $block */
/** @var Escaper $escaper */
/** @var ReCaptcha|null $recaptcha */
/** @var HeroiconsSolid $heroicons */
/** @var ViewModelRegistry $viewModels */

// Do not replace this with $viewModels->require(ReCaptcha::class); that might break the dependency
// on the Magento_ReCaptchaCustomer module
$recaptcha = $block->getData('viewModelRecaptcha');
$heroIcons = $viewModels->require(HeroiconsSolid::class);
?>
<form class="form form-edit-account"
      action="<?= $escaper->escapeUrl($block->getUrl('customer/account/editPost')) ?>"
      method="post" id="form-validate"
      enctype="multipart/form-data"
      x-data="initForm()"
      @submit.prevent="submitForm()"
      autocomplete="off">
    <fieldset class="fieldset info">
        <?= $block->getBlockHtml('formkey') ?>
        <legend class="legend"><span><?= $escaper->escapeHtml(__('Account Information')) ?></span></legend>
        <br>
        <?= $block->getLayout()->createBlock(Name::class)->setObject($block->getCustomer())->toHtml() ?>
        <?php $dob = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Dob::class) ?>
        <?php $taxvat = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Taxvat::class) ?>
        <?php $gender = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Gender::class) ?>
        <?php if ($dob->isEnabled()): ?>
            <?= $dob->setDate($block->getCustomer()->getDob())->toHtml() ?>
        <?php endif ?>
        <?php if ($taxvat->isEnabled()): ?>
            <?= $taxvat->setTaxvat($block->getCustomer()->getTaxvat())->toHtml() ?>
        <?php endif ?>
        <?php if ($gender->isEnabled()): ?>
            <?= $gender->setGender($block->getCustomer()->getGender())->toHtml() ?>
        <?php endif ?>

        <div class="field choice">
            <input type="checkbox" name="change_email" id="change-email" value="1"
                   title="<?= $escaper->escapeHtmlAttr(__('Change Email')) ?>"
                   x-on:change="showEmailField = !showEmailField"
                   class="checkbox"/>
            <label class="label" for="change-email">
                <span><?= $escaper->escapeHtml(__('Change Email')) ?></span>
            </label>
        </div>

        <div class="field choice">
            <input type="checkbox" name="change_password" id="change-password" value="1"
                   title="<?= $escaper->escapeHtmlAttr(__('Change Password')) ?>"
                   x-on:change="showPasswordFields = !showPasswordFields"
                <?php if ($block->getChangePassword()): ?> checked="checked"<?php endif; ?>
                   class="checkbox"/>
            <label class="label" for="change-password">
                <span><?= $escaper->escapeHtml(__('Change Password')) ?></span>
            </label>
        </div>

        <template x-if="showEmailField">
            <div class="field email required">
                <label class="label" for="email"><span><?= $escaper->escapeHtml(__('Email')) ?></span></label>
                <div class="control">
                    <input type="email" name="email" id="email" autocomplete="email" required
                           value="<?= $escaper->escapeHtmlAttr($block->getCustomer()->getEmail()) ?>"
                           title="<?= $escaper->escapeHtmlAttr(__('Email')) ?>"
                           class="form-input"/>
                </div>
            </div>
        </template>

        <template x-if="showEmailField || showPasswordFields">
            <div class="field password current required">
                <label class="label" for="current-password">
                    <span><?= $escaper->escapeHtml(__('Current Password')) ?></span>
                </label>
                <div class="control flex items-center">
                    <input :type="showPasswordCurrent ? 'text' : 'password'" class="form-input" name="current_password" id="current-password"
                           data-input="current-password"
                           autocomplete="off"/>
                    <div x-on:click="showPasswordCurrent = !showPasswordCurrent"
                         class="cursor-pointer px-4"
                         :aria-label="showPasswordCurrent ? '<?= $escaper->escapeJs(__('Hide Password')) ?>' : '<?= $escaper->escapeJs(__('Show Password')) ?>'"
                    >
                        <template x-if="!showPasswordCurrent">
                            <?= $heroIcons->eyeHtml('w-5 h-5'); ?>
                        </template>

                        <template x-if="showPasswordCurrent">
                            <?= $heroIcons->eyeOffHtml('w-5 h-5'); ?>
                        </template>
                    </div>
                </div>
            </div>
        </template>

        <template x-if="showPasswordFields">
            <div>
                <div class="field">
                    <label class="label" for="password"><span>
                            <?= $escaper->escapeHtml(__('New Password')) ?>
                    </span></label>
                    <div class="control flex items-center">
                        <?php $minimumPasswordLength = $block->getMinimumPasswordLength() ?>
                        <input :type="showPasswordNew ? 'text' : 'password'" class="form-input" name="password" id="password" required
                               x-on:change="checkPasswordsMatch()"
                               minlength="<?= $escaper->escapeHtmlAttr($minimumPasswordLength) ?>" autocomplete="off"/>
                        <div x-on:click="showPasswordNew = !showPasswordNew"
                             class="cursor-pointer px-4"
                             :aria-label="showPasswordNew ? '<?= $escaper->escapeJs(__('Hide Password')) ?>' : '<?= $escaper->escapeJs(__('Show Password')) ?>'"
                        >
                            <template x-if="!showPasswordNew">
                                <?= $heroIcons->eyeHtml('w-5 h-5'); ?>
                            </template>
                            <template x-if="showPasswordNew">
                                <?= $heroIcons->eyeOffHtml('w-5 h-5'); ?>
                            </template>
                        </div>
                    </div>
                    <p class="text-sm text-secondary mt-3">
                        <?= $escaper->escapeHtml(
                            __(
                                'Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.',
                                $block->getRequiredCharacterClassesNumber()
                            )
                        ) ?>
                    </p>
                </div>

                <div class="field">
                    <label class="label" for="password-confirmation">
                        <span><?= $escaper->escapeHtml(__('Confirm New Password')) ?></span>
                    </label>
                    <div class="control flex items-center">
                        <input :type="showPasswordConfirm ? 'text' : 'password'" class="form-input" name="password_confirmation"
                               id="password-confirmation"
                               x-on:change="checkPasswordsMatch()"
                               autocomplete="off"/>
                        <div x-on:click="showPasswordConfirm = !showPasswordConfirm"
                             class="cursor-pointer px-4"
                             :aria-label="showPasswordConfirm ? '<?= $escaper->escapeJs(__('Hide Password')) ?>' : '<?= $escaper->escapeJs(__('Show Password')) ?>'"
                        >
                            <template x-if="!showPasswordConfirm">
                                <?= $heroIcons->eyeHtml('w-5 h-5'); ?>
                            </template>
                            <template x-if="showPasswordConfirm">
                                <?= $heroIcons->eyeOffHtml('w-5 h-5'); ?>
                            </template>
                        </div>
                    </div>
                </div>

                <p class="my-4 text-red"
                   :class="passwordsMatching ? 'invisible' : 'visible'"
                >
                    <?= $escaper->escapeHtml(__('Your password confirmation must match your password.')) ?>
                </p>
            </div>
        </template>
    </fieldset>
    <?= $block->getChildHtml('form_additional_info') ?>
    <?= $recaptcha ? $recaptcha->getInputHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_EDIT) : '' ?>
    <div class="actions-toolbar">
        <div class="primary">
            <button type="submit" class="action save primary" title="<?= $escaper->escapeHtmlAttr(__('Save')) ?>">
                <span><?= $escaper->escapeHtml(__('Save')) ?></span>
            </button>
        </div>
        <div class="secondary">
            <a class="action back" href="<?= $escaper->escapeUrl($block->getBackUrl()) ?>">
                <span><?= $escaper->escapeHtml(__('Go back')) ?></span>
            </a>
        </div>
    </div>
</form>
<div class="w-full">
    <?= $recaptcha ? $recaptcha->getLegalNoticeHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_EDIT) : '' ?>
</div>
<script>
    function initForm() {
        return {
            errors: 0,
            hasCaptchaToken: 0,
            displayErrorMessage: false,
            errorMessages: [],
            passwordsMatching: true,
            showEmailField: false,
            showPasswordNew: false,
            showPasswordConfirm: false,
            showPasswordCurrent: false,
            showPasswordFields: <?= $block->getChangePassword()
                ? $escaper->escapeJs('true')
                : $escaper->escapeJs(
                    'false'
                ) ?>,
            checkPasswordsMatch() {
                if (!this.showPasswordFields) {
                    return true;
                }

                this.passwordsMatching = document.getElementById('password').value === document.getElementById('password-confirmation').value;

                return this.passwordsMatching;
            },
            setErrorMessages(messages) {
                this.errorMessages = [messages]
                this.displayErrorMessage = this.errorMessages.length
            },
            submitForm() {
                if (!this.checkPasswordsMatch()) {
                    return;
                }
                // Do not rename $form, the variable is expected to be declared in the recaptcha output
                const $form = document.querySelector('#form-validate');
                <?= $recaptcha ? $recaptcha->getValidationJsHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_EDIT) : '' ?>

                if (this.errors === 0) {
                    $form.submit();
                }
            }
        }
    }
</script>
